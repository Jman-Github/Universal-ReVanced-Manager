name: Release

on:
  workflow_dispatch:

jobs:
  release:
    name: Release
    if: ${{ github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        id: setup-java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set Gradle Java Home
        run: echo "ORG_GRADLE_JAVA_HOME=${{ steps.setup-java.outputs.path }}" >> $GITHUB_ENV

      - name: Cache Gradle
        uses: burrunan/gradle-cache-action@v3

      - name: Setup keystore
        run: |
          echo "${{ secrets.KEYSTORE }}" | base64 --decode > "app/keystore.jks"

      - name: Build release
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEYSTORE_ENTRY_ALIAS: ${{ secrets.KEYSTORE_ENTRY_ALIAS }}
          KEYSTORE_ENTRY_PASSWORD: ${{ secrets.KEYSTORE_ENTRY_PASSWORD }}
        run: ./gradlew assembleRelease

      - name: Locate release artifact
        id: artifact
        run: |
          APK_PATH=$(ls app/build/outputs/apk/release/universal-revanced-manager-*.apk | head -n 1)
          if [ -z "$APK_PATH" ]; then
            echo "Unable to find release APK in app/build/outputs/apk/release"
            exit 1
          fi
          echo "apk_path=$APK_PATH" >> "$GITHUB_OUTPUT"
          echo "Found APK at $APK_PATH"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          fingerprint: ${{ vars.GPG_FINGERPRINT }}

      - name: Release API
        run: npx multi-semantic-release --tag-format 'api@${version}' --ignore-packages app
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract release notes
        id: changelog
        run: |
          node - <<'NODE'
          const fs = require('fs');

          const changelogPath = 'api/CHANGELOG.md';
          if (!fs.existsSync(changelogPath)) {
            throw new Error(`Changelog not found at ${changelogPath}`);
          }

          const changelog = fs.readFileSync(changelogPath, 'utf8');
          const lines = changelog.split(/\r?\n/);
          const releaseSection = [];

          for (let index = 0; index < lines.length; index += 1) {
            const line = lines[index];
            if (index > 0 && /^#\s*v/i.test(line)) {
              break;
            }
            releaseSection.push(line);
          }

          const content = releaseSection.join('\n').replace(/\s+$/, '');
          if (!content.trim()) {
            throw new Error('No release notes content extracted from changelog.');
          }

          const headerLine = releaseSection.find((line) => /^#\s*v/i.test(line));
          if (!headerLine) {
            throw new Error('Failed to locate version header in changelog.');
          }

          const versionMatch = headerLine.match(/^#\s*(v[0-9]+\.[0-9]+\.[0-9]+)/i);
          if (!versionMatch) {
            throw new Error(`Unable to parse version from changelog header: "${headerLine}"`);
          }

          const version = versionMatch[1];
          fs.writeFileSync('release_notes.md', `${content}\n`, 'utf8');

          const outputFile = process.env.GITHUB_OUTPUT;
          if (!outputFile) {
            throw new Error('GITHUB_OUTPUT environment variable is not defined.');
          }
          fs.appendFileSync(outputFile, `version=${version}\n`);
          NODE

      - name: Release
        id: release
        run: |
          if [ -z "${VERSION}" ]; then
            echo "Version extracted from changelog is empty."
            exit 1
          fi
          echo "NEW_TAG=${VERSION}" >> $GITHUB_OUTPUT
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEYSTORE_ENTRY_ALIAS: ${{ secrets.KEYSTORE_ENTRY_ALIAS }}
          KEYSTORE_ENTRY_PASSWORD: ${{ secrets.KEYSTORE_ENTRY_PASSWORD }}
          VERSION: ${{ steps.changelog.outputs.version }}

      - name: Name GitHub Release
        if: steps.release.outputs.NEW_TAG != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.release.outputs.NEW_TAG }}
          APK_PATH: ${{ steps.artifact.outputs.apk_path }}
        run: |
          if ! gh release view "$TAG" >/dev/null 2>&1; then
            gh release create "$TAG" "$APK_PATH" --title "Universal ReVanaced Manger $TAG" --notes-file release_notes.md
          else
            gh release edit "$TAG" --title "Universal ReVanaced Manger $TAG" --notes-file release_notes.md
          fi

      - name: Upload APK asset
        if: steps.release.outputs.NEW_TAG != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.release.outputs.NEW_TAG }}
          APK_PATH: ${{ steps.artifact.outputs.apk_path }}
        run: |
          gh release upload "$TAG" "$APK_PATH" --clobber

      - name: Attest
        if: steps.release.outputs.NEW_TAG != ''
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: 'Universal ReVanaced Manger ${{ steps.release.outputs.NEW_TAG }}'
          subject-path: app/build/outputs/apk/release/universal-revanced-manager*.apk
